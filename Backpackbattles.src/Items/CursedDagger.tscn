[gd_scene load_steps=25 format=2]

[ext_resource path="res://Items/Item.tscn" type="PackedScene" id=1]
[ext_resource path="res://Items/Sprites/CursedDagger.png" type="Texture" id=2]
[ext_resource path="res://Items/CursedDagger.gd" type="Script" id=3]
[ext_resource path="res://Assets/Noise/Noise3.png" type="Texture" id=4]
[ext_resource path="res://Assets/Particles/Spot1.png" type="Texture" id=5]
[ext_resource path="res://Utility/AutoHideParticles.gd" type="Script" id=6]
[ext_resource path="res://Assets/Particles/OrganicFire1.png" type="Texture" id=7]
[ext_resource path="res://Items/GemSocket.tscn" type="PackedScene" id=8]
[ext_resource path="res://Items/Particles/CursedDaggerDragParticles.material" type="Material" id=9]

[sub_resource type="PhysicsMaterial" id=1]
resource_local_to_scene = true
friction = 0.73
bounce = 0.7

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform float blur : hint_range(0,10) = 5.0;
uniform sampler2D tonemapping;
uniform float numFrames = 1;
//uniform float textureFactor : hint_range(0,2) = 1.0;

varying float lifetime;

void vertex() {
	lifetime = INSTANCE_CUSTOM.y;
}

void fragment() {
	float tex = textureLod(TEXTURE, UV, blur).r;
	vec4 grad = texture(tonemapping, vec2(tex - lifetime));
	COLOR = vec4(grad.rgb * COLOR.rgb, grad.a*COLOR.a);
} "

[sub_resource type="Gradient" id=292]
offsets = PoolRealArray( 0, 0.047619, 0.427746, 1 )
colors = PoolColorArray( 0, 0, 0, 0, 0.0577597, 0.0311997, 0.0746461, 1, 0.954383, 0.607544, 0.984375, 1, 0.876937, 0.665859, 0.904297, 1 )

[sub_resource type="GradientTexture" id=293]
gradient = SubResource( 292 )
width = 200

[sub_resource type="ShaderMaterial" id=294]
shader = SubResource( 15 )
shader_param/blur = 0.0
shader_param/numFrames = 1.0
shader_param/tonemapping = SubResource( 293 )

[sub_resource type="Shader" id=134]
code = "shader_type canvas_item;

uniform sampler2D overlapGradient;
uniform sampler2D tex2;
uniform vec2 scroll1 = vec2(0.2, -0.3);
uniform vec2 scroll2 = vec2(0.1, -0.4);
uniform float tex2_scale = 0.5;
uniform float tex1_scale = 1.0;
varying float particleId;

void vertex(){
	particleId = INSTANCE_CUSTOM.z;
	
}


void fragment() {
	
	float adjustedTime = TIME + particleId * 11374.293247;
	float tex1_intensity = texture(tex2, tex1_scale * (UV + adjustedTime * scroll1)).r;
	float tex2_intensity = texture(tex2, tex2_scale * (UV + adjustedTime * scroll2)).r;
	float mask = texture(TEXTURE,UV).r;
	float intensity = tex1_intensity * tex2_intensity * mask * COLOR.a * MODULATE.a;
	vec4 overlapColor = texture(overlapGradient, vec2(intensity * 2.0));
	COLOR.a = 1.0; // already used in intensity
	COLOR.rgb *= MODULATE.rgb;
	COLOR *= overlapColor;

}"

[sub_resource type="Gradient" id=286]
offsets = PoolRealArray( 0, 0.047619, 0.208038, 1 )
colors = PoolColorArray( 0, 0, 0, 0, 0.0577597, 0.0311997, 0.0746461, 1, 0.899306, 0.387025, 0.943604, 1, 0.944196, 0.513672, 1, 1 )

[sub_resource type="GradientTexture" id=143]
gradient = SubResource( 286 )
width = 200

[sub_resource type="ShaderMaterial" id=287]
shader = SubResource( 134 )
shader_param/scroll1 = Vector2( 0.2, -0.3 )
shader_param/scroll2 = Vector2( 0.1, -0.4 )
shader_param/tex2_scale = 1.0
shader_param/tex1_scale = 0.5
shader_param/overlapGradient = SubResource( 143 )
shader_param/tex2 = ExtResource( 4 )

[sub_resource type="Gradient" id=288]
offsets = PoolRealArray( 0, 0.113475, 0.695035, 0.789598, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0.368627, 1, 1, 1, 0.0968037, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=285]
gradient = SubResource( 288 )
width = 50

[sub_resource type="Curve" id=289]
max_value = 1.43
_data = [ Vector2( 0, 0.561443 ), 0.0, 0.772704, 0, 0, Vector2( 1, 1.43 ), 1.71675, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=141]
width = 200
curve = SubResource( 289 )

[sub_resource type="ParticlesMaterial" id=291]
emission_shape = 2
emission_box_extents = Vector3( 10, 60, 1 )
flag_disable_z = true
direction = Vector3( 0, -1, 0 )
spread = 180.0
gravity = Vector3( 0, -300, 0 )
initial_velocity = 154.54
initial_velocity_random = 0.75
angular_velocity = 37.06
angular_velocity_random = 1.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
angle = 720.0
angle_random = 1.0
scale = 0.1
scale_random = 0.03
scale_curve = SubResource( 141 )
color_ramp = SubResource( 285 )
anim_offset = 1.0
anim_offset_random = 1.0

[sub_resource type="CapsuleShape2D" id=2]
radius = 26.0
height = 106.0

[node name="Cursed Dagger" instance=ExtResource( 1 )]
physics_material_override = SubResource( 1 )
script = ExtResource( 3 )

[node name="CollisionMap" parent="." index="0"]
position = Vector2( 40, 0 )
tile_data = PoolIntArray( -65537, 4, 0, -131072, 4, 0, -1, 3, 0, -65536, 4, 0, 65535, 3, 0, 0, 4, 0 )

[node name="Icon" parent="." index="1"]
scale = Vector2( 0.5, 0.5 )
texture = ExtResource( 2 )

[node name="Sockets" parent="Icon" index="0"]
scale = Vector2( 2, 2 )

[node name="GemSocket" parent="Icon/Sockets" index="0" instance=ExtResource( 8 )]
position = Vector2( 11, -27 )

[node name="SpecificDragParticles" type="Particles2D" parent="Icon" index="1"]
modulate = Color( 1.2, 1.2, 1.2, 1 )
show_behind_parent = true
material = SubResource( 294 )
position = Vector2( 16, -82 )
emitting = false
amount = 7
lifetime = 0.59
speed_scale = 0.89
process_material = ExtResource( 9 )
texture = ExtResource( 7 )
script = ExtResource( 6 )

[node name="CollisionPolygon2D" parent="ClickArea" index="0"]
polygon = PoolVector2Array( -40, -80, 40, -80, 40, 80, -40, 80 )

[node name="BottomCenter" parent="." index="3"]
position = Vector2( -7, 79 )

[node name="ActivationParticles" type="Particles2D" parent="." index="7"]
modulate = Color( 2, 2, 2, 1 )
show_behind_parent = true
material = SubResource( 287 )
position = Vector2( 3, -2 )
rotation = -0.146608
emitting = false
amount = 10
lifetime = 0.78
one_shot = true
explosiveness = 0.78
local_coords = false
process_material = SubResource( 291 )
texture = ExtResource( 5 )
script = ExtResource( 6 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="." index="8"]
visible = false
position = Vector2( -1, 1 )
shape = SubResource( 2 )
