[gd_scene load_steps=29 format=2]

[ext_resource path="res://Core/Character.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/Character/CombatSheet_Opponent.png" type="Texture" id=2]
[ext_resource path="res://Assets/StaminabarNoise.tres" type="Texture" id=3]
[ext_resource path="res://Assets/Noise/FireNoise.png" type="Texture" id=4]
[ext_resource path="res://Assets/Noise/FireNoise_rotated.png" type="Texture" id=5]
[ext_resource path="res://Assets/Noise/SparkleNoise.png" type="Texture" id=6]
[ext_resource path="res://Assets/Noise/LightningNoise1.png" type="Texture" id=7]

[sub_resource type="Shader" id=16]
code = "shader_type canvas_item;

uniform sampler2D tone_mapping;

uniform sampler2D NOISE_PATTERN;
uniform sampler2D NOISE_PATTERN2;
uniform vec2 scroll1 = vec2(1 , 0.4);
uniform vec2 scroll2 = vec2(0.2, 1.2);

uniform float baseIntensity : hint_range(-1.0,0.5) = 0.1;
uniform float intensityFactor : hint_range(0.0,5.0) = 1.5;

uniform vec2 noise1Scale = vec2(1,1);
uniform vec2 noise2Scale = vec2(1,1);
uniform float blur : hint_range(0.0, 7.0) = 3.0;

uniform float staticFactor : hint_range(-1,1) = 0.5;

uniform float zoomLevel : hint_range(0.0, 10.0) = 1.;
uniform vec2 cen = vec2(0.5);

vec2 polar_coordinates(vec2 uv, vec2 center, float zoom, float repeat)
{
	vec2 dir = uv - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) * 1.0/(3.1416 * 2.0);
	return mod(vec2(radius * zoom, angle * repeat), 1.0);
}

void fragment() {
	vec2 polar_uv = polar_coordinates(UV.xy, cen, zoomLevel, 1.0);

	vec4 texVal = textureLod(TEXTURE, UV, blur);
	float texAlpha = texVal.a;
	
	float intensity1 = textureLod(NOISE_PATTERN, polar_uv * noise1Scale + TIME * scroll1, 0.0).r;
	float intensity2 = textureLod(NOISE_PATTERN2, polar_uv * noise2Scale + TIME * scroll2, 0.0).r;
	float intensity= ((intensity1 * intensity2) + baseIntensity+ texVal.r * staticFactor) * intensityFactor * texAlpha;
	
	COLOR = textureLod(tone_mapping, vec2(intensity), 0.0);
}"

[sub_resource type="Gradient" id=18]
offsets = PoolRealArray( 0, 0.193548, 1 )
colors = PoolColorArray( 1, 0.87451, 0.568627, 0, 1, 0.80989, 0.242188, 0.311258, 1, 0.989223, 0.804688, 1 )

[sub_resource type="GradientTexture" id=19]
gradient = SubResource( 18 )
width = 200

[sub_resource type="ShaderMaterial" id=82]
resource_local_to_scene = true
shader = SubResource( 16 )
shader_param/scroll1 = Vector2( -0.152, -0.031 )
shader_param/scroll2 = Vector2( -0.243, 0.086 )
shader_param/baseIntensity = 0.332
shader_param/intensityFactor = 1.168
shader_param/noise1Scale = Vector2( 1.134, 1 )
shader_param/noise2Scale = Vector2( 0.938, 2 )
shader_param/blur = 0.0
shader_param/staticFactor = -0.086
shader_param/zoomLevel = 1.0
shader_param/cen = Vector2( 0.5, 0.5 )
shader_param/tone_mapping = SubResource( 19 )
shader_param/NOISE_PATTERN = ExtResource( 6 )
shader_param/NOISE_PATTERN2 = ExtResource( 6 )

[sub_resource type="Shader" id=77]
code = "shader_type canvas_item;

uniform sampler2D tone_mapping;

uniform sampler2D NOISE_PATTERN;
uniform sampler2D NOISE_PATTERN2;
uniform vec2 scroll1 = vec2(1 , 0.4);
uniform vec2 scroll2 = vec2(0.2, 1.2);

uniform float baseIntensity : hint_range(-1.0,0.5) = 0.1;
uniform float intensityFactor : hint_range(0.0,5.0) = 1.5;

uniform vec2 noise1Scale = vec2(1,1);
uniform vec2 noise2Scale = vec2(1,1);
uniform float blur : hint_range(0.0, 7.0) = 3.0;

uniform float staticFactor : hint_range(-1,1) = 0.5;

uniform float zoomLevel : hint_range(0.0, 10.0) = 1.;
uniform vec2 cen = vec2(0.5);

vec2 polar_coordinates(vec2 uv, vec2 center, float zoom, float repeat)
{
	vec2 dir = uv - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) * 1.0/(3.1416 * 2.0);
	return mod(vec2(radius * zoom, angle * repeat), 1.0);
}

void fragment() {
	vec2 polar_uv = polar_coordinates(UV.xy, cen, zoomLevel, 1.0);

	vec4 texVal = textureLod(TEXTURE, UV, blur);
	float texAlpha = texVal.a;
	
	float intensity1 = textureLod(NOISE_PATTERN, polar_uv * noise1Scale + TIME * scroll1, 0.0).r;
	float intensity2 = textureLod(NOISE_PATTERN2, polar_uv * noise2Scale + TIME * scroll2, 0.0).r;
	float intensity= ((intensity1 * intensity2) + baseIntensity+ texVal.r * staticFactor) * intensityFactor * texAlpha;
	
	COLOR = textureLod(tone_mapping, vec2(intensity), 0.0);
}"

[sub_resource type="Gradient" id=74]
offsets = PoolRealArray( 0, 0.174419, 0.22093, 0.401163, 0.668605 )
colors = PoolColorArray( 0.0156863, 0, 0, 0, 0.0431373, 0.00392157, 0, 0.584314, 0.184314, 0.129412, 0.00784314, 1, 0.738281, 0.620343, 0.0361396, 0.996078, 1, 0.992761, 0.814685, 1 )

[sub_resource type="GradientTexture" id=75]
gradient = SubResource( 74 )
width = 200

[sub_resource type="ShaderMaterial" id=83]
resource_local_to_scene = true
shader = SubResource( 77 )
shader_param/scroll1 = Vector2( -0.689, 0.005 )
shader_param/scroll2 = Vector2( -0.661, 0 )
shader_param/baseIntensity = -0.072
shader_param/intensityFactor = 4.466
shader_param/noise1Scale = Vector2( 1.134, 1 )
shader_param/noise2Scale = Vector2( 1, 2 )
shader_param/blur = 3.0
shader_param/staticFactor = -0.48
shader_param/zoomLevel = 1.0
shader_param/cen = Vector2( 0.5, 0.5 )
shader_param/tone_mapping = SubResource( 75 )
shader_param/NOISE_PATTERN = ExtResource( 7 )
shader_param/NOISE_PATTERN2 = ExtResource( 5 )

[sub_resource type="Shader" id=79]
code = "shader_type canvas_item;

uniform sampler2D tone_mapping;

uniform sampler2D NOISE_PATTERN;
uniform sampler2D NOISE_PATTERN2;
uniform vec2 scroll1 = vec2(1 , 0.4);
uniform vec2 scroll2 = vec2(0.2, 1.2);

uniform float baseIntensity : hint_range(-1.0,0.5) = 0.1;
uniform float intensityFactor : hint_range(0.0,5.0) = 1.5;

uniform vec2 noise1Scale = vec2(1,1);
uniform vec2 noise2Scale = vec2(1,1);
uniform float blur : hint_range(0.0, 7.0) = 3.0;

uniform float staticFactor : hint_range(-1,1) = 0.5;

uniform float zoomLevel : hint_range(0.0, 10.0) = 1.;
uniform vec2 cen = vec2(0.5);

vec2 polar_coordinates(vec2 uv, vec2 center, float zoom, float repeat)
{
	vec2 dir = uv - center;
	float radius = length(dir) * 2.0;
	float angle = atan(dir.y, dir.x) * 1.0/(3.1416 * 2.0);
	return mod(vec2(radius * zoom, angle * repeat), 1.0);
}

void fragment() {
	vec2 polar_uv = polar_coordinates(UV.xy, cen, zoomLevel, 1.0);

	vec4 texVal = textureLod(TEXTURE, UV, blur);
	float texAlpha = texVal.a;
	
	float intensity1 = textureLod(NOISE_PATTERN, polar_uv * noise1Scale + TIME * scroll1, 0.0).r;
	float intensity2 = textureLod(NOISE_PATTERN2, polar_uv * noise2Scale + TIME * scroll2, 0.0).r;
	float intensity= ((intensity1 * intensity2) + baseIntensity+ texVal.r * staticFactor) * intensityFactor * texAlpha;
	
	COLOR = textureLod(tone_mapping, vec2(intensity), 0.0);
}"

[sub_resource type="Gradient" id=80]
offsets = PoolRealArray( 0, 0.174419, 0.22093, 0.401163, 0.668605 )
colors = PoolColorArray( 0.0156863, 0, 0, 0, 0.0431373, 0.00392157, 0, 0.584314, 0.184314, 0.129412, 0.00784314, 1, 0.738281, 0.620343, 0.0361396, 0.996078, 1, 0.992761, 0.814685, 1 )

[sub_resource type="GradientTexture" id=81]
gradient = SubResource( 80 )
width = 200

[sub_resource type="ShaderMaterial" id=84]
resource_local_to_scene = true
shader = SubResource( 79 )
shader_param/scroll1 = Vector2( -0.321, 0.005 )
shader_param/scroll2 = Vector2( -0.384, 0 )
shader_param/baseIntensity = 0.021
shader_param/intensityFactor = 2.586
shader_param/noise1Scale = Vector2( 0.626, 1 )
shader_param/noise2Scale = Vector2( 0.954, 1 )
shader_param/blur = 3.0
shader_param/staticFactor = -1.0
shader_param/zoomLevel = 1.0
shader_param/cen = Vector2( 0.5, 0.5 )
shader_param/tone_mapping = SubResource( 81 )
shader_param/NOISE_PATTERN = ExtResource( 7 )
shader_param/NOISE_PATTERN2 = ExtResource( 4 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform sampler2D noise;
uniform sampler2D noise2;
uniform sampler2D gradientMapping;

uniform float healthPercentage : hint_range(-0.02, 1) = 1.0;
uniform float lastDamagePercentage : hint_range(-0.02, 1) = 1.0;

uniform vec2 scroll1 = vec2(0.05,0.05);
uniform vec2 scroll2 = vec2(-0.05,-0.05);
uniform vec2 scale1 = vec2(3,0.3);
uniform vec2 scale2 = vec2(1,0.1);

uniform vec4 damageDiffColor : hint_color = vec4(1,1,1,1);
uniform vec4 bonusDiffColor : hint_color = vec4(1,1,1,1);
const vec4 backgroundColor = vec4(0,0,0,1);

void fragment() {
	float noiseVal1 = texture(noise, UV * scale1 + TIME * scroll1).r;
	float noiseVal2 = texture(noise2, UV * scale2 + TIME * scroll2).r;
	float intensity = noiseVal1*noiseVal2;
	

	if (lastDamagePercentage > healthPercentage) {

	// is UV.x around hp?
	float isDamagePart = smoothstep(lastDamagePercentage-0.07, lastDamagePercentage+0.0, UV.x);
	float isDamageDiffPart = smoothstep(healthPercentage - 0.03, healthPercentage +0.03, UV.x);
	
	intensity *= (1.0 - isDamagePart);
	
	vec4 hurtColor = texture(gradientMapping, vec2(intensity));
	
	hurtColor.rgb = mix(hurtColor.rgb, 1.4 * bonusDiffColor.rgb * hurtColor.r, isDamageDiffPart);
	COLOR = hurtColor;
	} else { // lastDamagePercentage <=  healthPercentage

	float isDamagePart = smoothstep(healthPercentage-0.07, healthPercentage+0.0, UV.x);
	float isDamageDiffPart = smoothstep(lastDamagePercentage - 0.03, lastDamagePercentage +0.03, UV.x);
	
	intensity *= (1.0 - isDamagePart);
	
	vec4 hurtColor = texture(gradientMapping, vec2(intensity));

	hurtColor.rgb = mix(hurtColor.rgb, 1.4 * damageDiffColor.rgb * hurtColor.r, isDamageDiffPart);
	COLOR = hurtColor;
	}

	

}"

[sub_resource type="Gradient" id=4]
offsets = PoolRealArray( 0, 0.00997506, 0.148387, 0.316129, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.6875, 0.102075, 0.029541, 1, 0.837891, 0.182151, 0.132557, 1, 1, 0.293762, 0.220703, 1, 1, 0.679688, 0.679688, 1 )

[sub_resource type="GradientTexture" id=5]
gradient = SubResource( 4 )
width = 200

[sub_resource type="ShaderMaterial" id=64]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/healthPercentage = 0.444
shader_param/lastDamagePercentage = 0.229
shader_param/scroll1 = Vector2( -0.0184, 0.0041 )
shader_param/scroll2 = Vector2( -0.014, -0.0193 )
shader_param/scale1 = Vector2( 1.8855, 0.344 )
shader_param/scale2 = Vector2( 2.0093, 0.2629 )
shader_param/damageDiffColor = Color( 1, 0.815686, 0.815686, 1 )
shader_param/bonusDiffColor = Color( 0.564706, 1, 0.447059, 1 )
shader_param/noise = ExtResource( 4 )
shader_param/noise2 = ExtResource( 4 )
shader_param/gradientMapping = SubResource( 5 )

[sub_resource type="Gradient" id=17]
offsets = PoolRealArray( 0, 0.322581, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 1, 0.900879, 0.09375, 1, 1, 0.985981, 0.425781, 1 )

[sub_resource type="GradientTexture" id=63]
gradient = SubResource( 17 )
width = 200

[sub_resource type="ShaderMaterial" id=65]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/healthPercentage = 0.201
shader_param/lastDamagePercentage = 0.101
shader_param/scroll1 = Vector2( 0.05, 0.05 )
shader_param/scroll2 = Vector2( -0.05, -0.05 )
shader_param/scale1 = Vector2( 3, 0.3 )
shader_param/scale2 = Vector2( 1, 0.1 )
shader_param/damageDiffColor = Color( 1, 0.984314, 0.729412, 1 )
shader_param/bonusDiffColor = Color( 0.623529, 1, 0.470588, 1 )
shader_param/noise = ExtResource( 3 )
shader_param/noise2 = ExtResource( 3 )
shader_param/gradientMapping = SubResource( 63 )

[sub_resource type="Animation" id=21]
resource_name = "OpponentInit"
tracks/0/type = "value"
tracks/0/path = NodePath("CombatUI:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("CombatUI:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.8 ),
"transitions": PoolRealArray( 0.482968, 0.482968, 0.68302 ),
"update": 0,
"values": [ Vector2( -824, 456 ), Vector2( -824, 456 ), Vector2( -780, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Mirroring/Sprite:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -667.001, -45.696 ), Vector2( -112, -48 ) ]
}

[sub_resource type="Animation" id=22]
resource_name = "OpponentLeaveCombat"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("CombatUI:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 2.14355, 0.482968 ),
"update": 0,
"values": [ Vector2( -780, 0 ), Vector2( -824, 456 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Mirroring/Sprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = false
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 2.73208, 1 ),
"update": 0,
"values": [ Vector2( -112, -48 ), Vector2( -667.001, -45.696 ) ]
}

[node name="Character" instance=ExtResource( 1 )]

[node name="Mirroring" parent="." index="0"]
scale = Vector2( -1, 1 )

[node name="Sprite" parent="Mirroring" index="0"]
position = Vector2( -112, -48 )

[node name="InvulnerabilityBubble" parent="Mirroring/Sprite" index="4"]
material = SubResource( 82 )

[node name="BattleRagePulse" parent="Mirroring/Sprite" index="5"]
material = SubResource( 83 )

[node name="BattleRageAura" parent="Mirroring/Sprite" index="6"]
material = SubResource( 84 )

[node name="CombatUI" parent="." index="1"]
position = Vector2( -780, 0 )

[node name="Sheet" parent="CombatUI" index="0"]
position = Vector2( 417, -40 )
texture = ExtResource( 2 )

[node name="Sword" parent="CombatUI/Sheet" index="0"]
position = Vector2( -237.062, -200 )
flip_h = true

[node name="Name" parent="CombatUI" index="1"]
margin_left = 205.0
margin_right = 608.0

[node name="Bar" parent="CombatUI/Healthbar" index="1"]
material = SubResource( 64 )

[node name="Bar" parent="CombatUI/Staminarbar" index="1"]
material = SubResource( 65 )

[node name="AnimationPlayer" parent="." index="6"]
reset_on_save = false
anims/OpponentInit = SubResource( 21 )
anims/OpponentLeaveCombat = SubResource( 22 )

[editable path="CombatUI/Block"]
[editable path="CombatUI/Regeneration"]
[editable path="CombatUI/Lucky"]
[editable path="CombatUI/Spikes"]
[editable path="CombatUI/Vampirism"]
[editable path="CombatUI/Mana"]
[editable path="CombatUI/Empower"]
[editable path="CombatUI/Heat"]
[editable path="CombatUI/Protection"]
[editable path="CombatUI/Poison"]
[editable path="CombatUI/Blind"]
[editable path="CombatUI/Weak"]
[editable path="CombatUI/Cold"]
