/*     */ package javazoom.jl.decoder;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class LayerIIDecoder
/*     */   extends LayerIDecoder
/*     */   implements FrameDecoder
/*     */ {
/*     */   protected void createSubbands() {
/*  35 */     if (this.mode == 3) {
/*  36 */       for (int i = 0; i < this.num_subbands; i++)
/*  37 */         this.subbands[i] = new SubbandLayer2(i); 
/*  38 */     } else if (this.mode == 1) {
/*  39 */       int i; for (i = 0; i < this.header.intensity_stereo_bound(); i++)
/*  40 */         this.subbands[i] = new SubbandLayer2Stereo(i); 
/*  41 */       for (; i < this.num_subbands; i++)
/*  42 */         this.subbands[i] = new SubbandLayer2IntensityStereo(i); 
/*     */     } else {
/*  44 */       for (int i = 0; i < this.num_subbands; i++)
/*  45 */         this.subbands[i] = new SubbandLayer2Stereo(i); 
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void readScaleFactorSelection() {
/*  50 */     for (int i = 0; i < this.num_subbands; i++) {
/*  51 */       ((SubbandLayer2)this.subbands[i]).read_scalefactor_selection(this.stream, this.crc);
/*     */     }
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   static class SubbandLayer2
/*     */     extends LayerIDecoder.Subband
/*     */   {
/*  60 */     public static final float[] grouping_5bits = new float[] { -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, -0.6666667F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  72 */     public static final float[] grouping_7bits = new float[] { -0.8F, -0.8F, -0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.8F, -0.8F, -0.8F, -0.4F, -0.8F, -0.4F, -0.4F, -0.8F, 0.0F, -0.4F, -0.8F, 0.4F, -0.4F, -0.8F, 0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.8F, -0.4F, 0.0F, -0.8F, 0.0F, 0.0F, -0.8F, 0.4F, 0.0F, -0.8F, 0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.8F, -0.4F, 0.4F, -0.8F, 0.0F, 0.4F, -0.8F, 0.4F, 0.4F, -0.8F, 0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.8F, -0.4F, 0.8F, -0.8F, 0.0F, 0.8F, -0.8F, 0.4F, 0.8F, -0.8F, 0.8F, 0.8F, -0.8F, -0.8F, -0.8F, -0.4F, -0.4F, -0.8F, -0.4F, 0.0F, -0.8F, -0.4F, 0.4F, -0.8F, -0.4F, 0.8F, -0.8F, -0.4F, -0.8F, -0.4F, -0.4F, -0.4F, -0.4F, -0.4F, 0.0F, -0.4F, -0.4F, 0.4F, -0.4F, -0.4F, 0.8F, -0.4F, -0.4F, -0.8F, 0.0F, -0.4F, -0.4F, 0.0F, -0.4F, 0.0F, 0.0F, -0.4F, 0.4F, 0.0F, -0.4F, 0.8F, 0.0F, -0.4F, -0.8F, 0.4F, -0.4F, -0.4F, 0.4F, -0.4F, 0.0F, 0.4F, -0.4F, 0.4F, 0.4F, -0.4F, 0.8F, 0.4F, -0.4F, -0.8F, 0.8F, -0.4F, -0.4F, 0.8F, -0.4F, 0.0F, 0.8F, -0.4F, 0.4F, 0.8F, -0.4F, 0.8F, 0.8F, -0.4F, -0.8F, -0.8F, 0.0F, -0.4F, -0.8F, 0.0F, 0.0F, -0.8F, 0.0F, 0.4F, -0.8F, 0.0F, 0.8F, -0.8F, 0.0F, -0.8F, -0.4F, 0.0F, -0.4F, -0.4F, 0.0F, 0.0F, -0.4F, 0.0F, 0.4F, -0.4F, 0.0F, 0.8F, -0.4F, 0.0F, -0.8F, 0.0F, 0.0F, -0.4F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.4F, 0.0F, 0.0F, 0.8F, 0.0F, 0.0F, -0.8F, 0.4F, 0.0F, -0.4F, 0.4F, 0.0F, 0.0F, 0.4F, 0.0F, 0.4F, 0.4F, 0.0F, 0.8F, 0.4F, 0.0F, -0.8F, 0.8F, 0.0F, -0.4F, 0.8F, 0.0F, 0.0F, 0.8F, 0.0F, 0.4F, 0.8F, 0.0F, 0.8F, 0.8F, 0.0F, -0.8F, -0.8F, 0.4F, -0.4F, -0.8F, 0.4F, 0.0F, -0.8F, 0.4F, 0.4F, -0.8F, 0.4F, 0.8F, -0.8F, 0.4F, -0.8F, -0.4F, 0.4F, -0.4F, -0.4F, 0.4F, 0.0F, -0.4F, 0.4F, 0.4F, -0.4F, 0.4F, 0.8F, -0.4F, 0.4F, -0.8F, 0.0F, 0.4F, -0.4F, 0.0F, 0.4F, 0.0F, 0.0F, 0.4F, 0.4F, 0.0F, 0.4F, 0.8F, 0.0F, 0.4F, -0.8F, 0.4F, 0.4F, -0.4F, 0.4F, 0.4F, 0.0F, 0.4F, 0.4F, 0.4F, 0.4F, 0.4F, 0.8F, 0.4F, 0.4F, -0.8F, 0.8F, 0.4F, -0.4F, 0.8F, 0.4F, 0.0F, 0.8F, 0.4F, 0.4F, 0.8F, 0.4F, 0.8F, 0.8F, 0.4F, -0.8F, -0.8F, 0.8F, -0.4F, -0.8F, 0.8F, 0.0F, -0.8F, 0.8F, 0.4F, -0.8F, 0.8F, 0.8F, -0.8F, 0.8F, -0.8F, -0.4F, 0.8F, -0.4F, -0.4F, 0.8F, 0.0F, -0.4F, 0.8F, 0.4F, -0.4F, 0.8F, 0.8F, -0.4F, 0.8F, -0.8F, 0.0F, 0.8F, -0.4F, 0.0F, 0.8F, 0.0F, 0.0F, 0.8F, 0.4F, 0.0F, 0.8F, 0.8F, 0.0F, 0.8F, -0.8F, 0.4F, 0.8F, -0.4F, 0.4F, 0.8F, 0.0F, 0.4F, 0.8F, 0.4F, 0.4F, 0.8F, 0.8F, 0.4F, 0.8F, -0.8F, 0.8F, 0.8F, -0.4F, 0.8F, 0.8F, 0.0F, 0.8F, 0.8F, 0.4F, 0.8F, 0.8F, 0.8F, 0.8F, 0.8F };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  96 */     public static final float[] grouping_10bits = new float[] { -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.22222222F, 0.0F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, -0.8888889F, -0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.6666667F, -0.8888889F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, -0.22222222F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 0.44444445F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, -0.8888889F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, -0.22222222F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 0.44444445F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.6666667F, -0.22222222F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.6666667F, 0.44444445F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, -0.22222222F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 0.44444445F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, -0.22222222F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 0.44444445F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.6666667F, -0.22222222F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.6666667F, 0.44444445F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, -0.22222222F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 0.44444445F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, -0.22222222F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 0.44444445F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, -0.8888889F, -0.44444445F, -0.6666667F, -0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.44444445F, -0.8888889F, -0.6666667F, -0.44444445F, -0.6666667F, -0.6666667F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, -0.22222222F, -0.6666667F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 0.44444445F, -0.6666667F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, -0.8888889F, -0.44444445F, -0.44444445F, -0.6666667F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, -0.44444445F, -0.22222222F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 0.44444445F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, -0.8888889F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, -0.44444445F, -0.22222222F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, -0.44444445F, 0.44444445F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, -0.44444445F, -0.22222222F, 0.0F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 0.44444445F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, -0.44444445F, -0.22222222F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 0.44444445F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, -0.44444445F, -0.22222222F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, -0.44444445F, 0.44444445F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, -0.44444445F, -0.22222222F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 0.44444445F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, -0.44444445F, -0.22222222F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 0.44444445F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, -0.8888889F, -0.22222222F, -0.6666667F, -0.8888889F, -0.22222222F, -0.44444445F, -0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, -0.22222222F, 0.0F, -0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, -0.22222222F, -0.8888889F, -0.6666667F, -0.22222222F, -0.6666667F, -0.6666667F, -0.22222222F, -0.44444445F, -0.6666667F, -0.22222222F, -0.22222222F, -0.6666667F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 0.44444445F, -0.6666667F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, -0.8888889F, -0.44444445F, -0.22222222F, -0.6666667F, -0.44444445F, -0.22222222F, -0.44444445F, -0.44444445F, -0.22222222F, -0.22222222F, -0.44444445F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 0.44444445F, -0.44444445F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, -0.8888889F, -0.22222222F, -0.22222222F, -0.6666667F, -0.22222222F, -0.22222222F, -0.44444445F, -0.22222222F, -0.22222222F, -0.22222222F, -0.22222222F, -0.22222222F, 0.0F, -0.22222222F, -0.22222222F, 0.22222222F, -0.22222222F, -0.22222222F, 0.44444445F, -0.22222222F, -0.22222222F, 0.6666667F, -0.22222222F, -0.22222222F, 0.8888889F, -0.22222222F, -0.22222222F, -0.8888889F, 0.0F, -0.22222222F, -0.6666667F, 0.0F, -0.22222222F, -0.44444445F, 0.0F, -0.22222222F, -0.22222222F, 0.0F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 0.44444445F, 0.0F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.22222222F, -0.22222222F, -0.6666667F, 0.22222222F, -0.22222222F, -0.44444445F, 0.22222222F, -0.22222222F, -0.22222222F, 0.22222222F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 0.44444445F, 0.22222222F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.44444445F, -0.22222222F, -0.6666667F, 0.44444445F, -0.22222222F, -0.44444445F, 0.44444445F, -0.22222222F, -0.22222222F, 0.44444445F, -0.22222222F, 0.0F, 0.44444445F, -0.22222222F, 0.22222222F, 0.44444445F, -0.22222222F, 0.44444445F, 0.44444445F, -0.22222222F, 0.6666667F, 0.44444445F, -0.22222222F, 0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.6666667F, -0.22222222F, -0.6666667F, 0.6666667F, -0.22222222F, -0.44444445F, 0.6666667F, -0.22222222F, -0.22222222F, 0.6666667F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 0.44444445F, 0.6666667F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.8888889F, -0.22222222F, -0.6666667F, 0.8888889F, -0.22222222F, -0.44444445F, 0.8888889F, -0.22222222F, -0.22222222F, 0.8888889F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 0.44444445F, 0.8888889F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, -0.8888889F, 0.0F, -0.6666667F, -0.8888889F, 0.0F, -0.44444445F, -0.8888889F, 0.0F, -0.22222222F, -0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.0F, -0.8888889F, -0.6666667F, 0.0F, -0.6666667F, -0.6666667F, 0.0F, -0.44444445F, -0.6666667F, 0.0F, -0.22222222F, -0.6666667F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 0.44444445F, -0.6666667F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, -0.8888889F, -0.44444445F, 0.0F, -0.6666667F, -0.44444445F, 0.0F, -0.44444445F, -0.44444445F, 0.0F, -0.22222222F, -0.44444445F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 0.44444445F, -0.44444445F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, -0.8888889F, -0.22222222F, 0.0F, -0.6666667F, -0.22222222F, 0.0F, -0.44444445F, -0.22222222F, 0.0F, -0.22222222F, -0.22222222F, 0.0F, 0.0F, -0.22222222F, 0.0F, 0.22222222F, -0.22222222F, 0.0F, 0.44444445F, -0.22222222F, 0.0F, 0.6666667F, -0.22222222F, 0.0F, 0.8888889F, -0.22222222F, 0.0F, -0.8888889F, 0.0F, 0.0F, -0.6666667F, 0.0F, 0.0F, -0.44444445F, 0.0F, 0.0F, -0.22222222F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.0F, 0.44444445F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.0F, -0.8888889F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.0F, -0.22222222F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 0.44444445F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.0F, -0.22222222F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.0F, 0.44444445F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.0F, -0.22222222F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 0.44444445F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.0F, -0.22222222F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 0.44444445F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, -0.8888889F, -0.8888889F, 0.22222222F, -0.6666667F, -0.8888889F, 0.22222222F, -0.44444445F, -0.8888889F, 0.22222222F, -0.22222222F, -0.8888889F, 0.22222222F, 0.0F, -0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.22222222F, -0.8888889F, -0.6666667F, 0.22222222F, -0.6666667F, -0.6666667F, 0.22222222F, -0.44444445F, -0.6666667F, 0.22222222F, -0.22222222F, -0.6666667F, 0.22222222F, 0.0F, -0.6666667F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 0.44444445F, -0.6666667F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, -0.8888889F, -0.44444445F, 0.22222222F, -0.6666667F, -0.44444445F, 0.22222222F, -0.44444445F, -0.44444445F, 0.22222222F, -0.22222222F, -0.44444445F, 0.22222222F, 0.0F, -0.44444445F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 0.44444445F, -0.44444445F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, -0.8888889F, -0.22222222F, 0.22222222F, -0.6666667F, -0.22222222F, 0.22222222F, -0.44444445F, -0.22222222F, 0.22222222F, -0.22222222F, -0.22222222F, 0.22222222F, 0.0F, -0.22222222F, 0.22222222F, 0.22222222F, -0.22222222F, 0.22222222F, 0.44444445F, -0.22222222F, 0.22222222F, 0.6666667F, -0.22222222F, 0.22222222F, 0.8888889F, -0.22222222F, 0.22222222F, -0.8888889F, 0.0F, 0.22222222F, -0.6666667F, 0.0F, 0.22222222F, -0.44444445F, 0.0F, 0.22222222F, -0.22222222F, 0.0F, 0.22222222F, 0.0F, 0.0F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 0.44444445F, 0.0F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, -0.8888889F, 0.22222222F, 0.22222222F, -0.6666667F, 0.22222222F, 0.22222222F, -0.44444445F, 0.22222222F, 0.22222222F, -0.22222222F, 0.22222222F, 0.22222222F, 0.0F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 0.22222222F, 0.44444445F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, -0.8888889F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 0.22222222F, -0.22222222F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 0.22222222F, 0.44444445F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 0.22222222F, -0.22222222F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 0.22222222F, 0.44444445F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 0.22222222F, -0.22222222F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 0.22222222F, 0.44444445F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, -0.8888889F, 0.44444445F, -0.6666667F, -0.8888889F, 0.44444445F, -0.44444445F, -0.8888889F, 0.44444445F, -0.22222222F, -0.8888889F, 0.44444445F, 0.0F, -0.8888889F, 0.44444445F, 0.22222222F, -0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.44444445F, -0.8888889F, -0.6666667F, 0.44444445F, -0.6666667F, -0.6666667F, 0.44444445F, -0.44444445F, -0.6666667F, 0.44444445F, -0.22222222F, -0.6666667F, 0.44444445F, 0.0F, -0.6666667F, 0.44444445F, 0.22222222F, -0.6666667F, 0.44444445F, 0.44444445F, -0.6666667F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, -0.8888889F, -0.44444445F, 0.44444445F, -0.6666667F, -0.44444445F, 0.44444445F, -0.44444445F, -0.44444445F, 0.44444445F, -0.22222222F, -0.44444445F, 0.44444445F, 0.0F, -0.44444445F, 0.44444445F, 0.22222222F, -0.44444445F, 0.44444445F, 0.44444445F, -0.44444445F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, -0.8888889F, -0.22222222F, 0.44444445F, -0.6666667F, -0.22222222F, 0.44444445F, -0.44444445F, -0.22222222F, 0.44444445F, -0.22222222F, -0.22222222F, 0.44444445F, 0.0F, -0.22222222F, 0.44444445F, 0.22222222F, -0.22222222F, 0.44444445F, 0.44444445F, -0.22222222F, 0.44444445F, 0.6666667F, -0.22222222F, 0.44444445F, 0.8888889F, -0.22222222F, 0.44444445F, -0.8888889F, 0.0F, 0.44444445F, -0.6666667F, 0.0F, 0.44444445F, -0.44444445F, 0.0F, 0.44444445F, -0.22222222F, 0.0F, 0.44444445F, 0.0F, 0.0F, 0.44444445F, 0.22222222F, 0.0F, 0.44444445F, 0.44444445F, 0.0F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, -0.8888889F, 0.22222222F, 0.44444445F, -0.6666667F, 0.22222222F, 0.44444445F, -0.44444445F, 0.22222222F, 0.44444445F, -0.22222222F, 0.22222222F, 0.44444445F, 0.0F, 0.22222222F, 0.44444445F, 0.22222222F, 0.22222222F, 0.44444445F, 0.44444445F, 0.22222222F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, -0.8888889F, 0.44444445F, 0.44444445F, -0.6666667F, 0.44444445F, 0.44444445F, -0.44444445F, 0.44444445F, 0.44444445F, -0.22222222F, 0.44444445F, 0.44444445F, 0.0F, 0.44444445F, 0.44444445F, 0.22222222F, 0.44444445F, 0.44444445F, 0.44444445F, 0.44444445F, 0.44444445F, 0.6666667F, 0.44444445F, 0.44444445F, 0.8888889F, 0.44444445F, 0.44444445F, -0.8888889F, 0.6666667F, 0.44444445F, -0.6666667F, 0.6666667F, 0.44444445F, -0.44444445F, 0.6666667F, 0.44444445F, -0.22222222F, 0.6666667F, 0.44444445F, 0.0F, 0.6666667F, 0.44444445F, 0.22222222F, 0.6666667F, 0.44444445F, 0.44444445F, 0.6666667F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.8888889F, 0.44444445F, -0.6666667F, 0.8888889F, 0.44444445F, -0.44444445F, 0.8888889F, 0.44444445F, -0.22222222F, 0.8888889F, 0.44444445F, 0.0F, 0.8888889F, 0.44444445F, 0.22222222F, 0.8888889F, 0.44444445F, 0.44444445F, 0.8888889F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, -0.8888889F, 0.6666667F, -0.6666667F, -0.8888889F, 0.6666667F, -0.44444445F, -0.8888889F, 0.6666667F, -0.22222222F, -0.8888889F, 0.6666667F, 0.0F, -0.8888889F, 0.6666667F, 0.22222222F, -0.8888889F, 0.6666667F, 0.44444445F, -0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.6666667F, -0.8888889F, -0.6666667F, 0.6666667F, -0.6666667F, -0.6666667F, 0.6666667F, -0.44444445F, -0.6666667F, 0.6666667F, -0.22222222F, -0.6666667F, 0.6666667F, 0.0F, -0.6666667F, 0.6666667F, 0.22222222F, -0.6666667F, 0.6666667F, 0.44444445F, -0.6666667F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, -0.8888889F, -0.44444445F, 0.6666667F, -0.6666667F, -0.44444445F, 0.6666667F, -0.44444445F, -0.44444445F, 0.6666667F, -0.22222222F, -0.44444445F, 0.6666667F, 0.0F, -0.44444445F, 0.6666667F, 0.22222222F, -0.44444445F, 0.6666667F, 0.44444445F, -0.44444445F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, -0.8888889F, -0.22222222F, 0.6666667F, -0.6666667F, -0.22222222F, 0.6666667F, -0.44444445F, -0.22222222F, 0.6666667F, -0.22222222F, -0.22222222F, 0.6666667F, 0.0F, -0.22222222F, 0.6666667F, 0.22222222F, -0.22222222F, 0.6666667F, 0.44444445F, -0.22222222F, 0.6666667F, 0.6666667F, -0.22222222F, 0.6666667F, 0.8888889F, -0.22222222F, 0.6666667F, -0.8888889F, 0.0F, 0.6666667F, -0.6666667F, 0.0F, 0.6666667F, -0.44444445F, 0.0F, 0.6666667F, -0.22222222F, 0.0F, 0.6666667F, 0.0F, 0.0F, 0.6666667F, 0.22222222F, 0.0F, 0.6666667F, 0.44444445F, 0.0F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, -0.8888889F, 0.22222222F, 0.6666667F, -0.6666667F, 0.22222222F, 0.6666667F, -0.44444445F, 0.22222222F, 0.6666667F, -0.22222222F, 0.22222222F, 0.6666667F, 0.0F, 0.22222222F, 0.6666667F, 0.22222222F, 0.22222222F, 0.6666667F, 0.44444445F, 0.22222222F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, -0.8888889F, 0.44444445F, 0.6666667F, -0.6666667F, 0.44444445F, 0.6666667F, -0.44444445F, 0.44444445F, 0.6666667F, -0.22222222F, 0.44444445F, 0.6666667F, 0.0F, 0.44444445F, 0.6666667F, 0.22222222F, 0.44444445F, 0.6666667F, 0.44444445F, 0.44444445F, 0.6666667F, 0.6666667F, 0.44444445F, 0.6666667F, 0.8888889F, 0.44444445F, 0.6666667F, -0.8888889F, 0.6666667F, 0.6666667F, -0.6666667F, 0.6666667F, 0.6666667F, -0.44444445F, 0.6666667F, 0.6666667F, -0.22222222F, 0.6666667F, 0.6666667F, 0.0F, 0.6666667F, 0.6666667F, 0.22222222F, 0.6666667F, 0.6666667F, 0.44444445F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, -0.8888889F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.6666667F, -0.22222222F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.6666667F, 0.44444445F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, -0.8888889F, 0.8888889F, -0.6666667F, -0.8888889F, 0.8888889F, -0.44444445F, -0.8888889F, 0.8888889F, -0.22222222F, -0.8888889F, 0.8888889F, 0.0F, -0.8888889F, 0.8888889F, 0.22222222F, -0.8888889F, 0.8888889F, 0.44444445F, -0.8888889F, 0.8888889F, 0.6666667F, -0.8888889F, 0.8888889F, 0.8888889F, -0.8888889F, 0.8888889F, -0.8888889F, -0.6666667F, 0.8888889F, -0.6666667F, -0.6666667F, 0.8888889F, -0.44444445F, -0.6666667F, 0.8888889F, -0.22222222F, -0.6666667F, 0.8888889F, 0.0F, -0.6666667F, 0.8888889F, 0.22222222F, -0.6666667F, 0.8888889F, 0.44444445F, -0.6666667F, 0.8888889F, 0.6666667F, -0.6666667F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, -0.8888889F, -0.44444445F, 0.8888889F, -0.6666667F, -0.44444445F, 0.8888889F, -0.44444445F, -0.44444445F, 0.8888889F, -0.22222222F, -0.44444445F, 0.8888889F, 0.0F, -0.44444445F, 0.8888889F, 0.22222222F, -0.44444445F, 0.8888889F, 0.44444445F, -0.44444445F, 0.8888889F, 0.6666667F, -0.44444445F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, -0.8888889F, -0.22222222F, 0.8888889F, -0.6666667F, -0.22222222F, 0.8888889F, -0.44444445F, -0.22222222F, 0.8888889F, -0.22222222F, -0.22222222F, 0.8888889F, 0.0F, -0.22222222F, 0.8888889F, 0.22222222F, -0.22222222F, 0.8888889F, 0.44444445F, -0.22222222F, 0.8888889F, 0.6666667F, -0.22222222F, 0.8888889F, 0.8888889F, -0.22222222F, 0.8888889F, -0.8888889F, 0.0F, 0.8888889F, -0.6666667F, 0.0F, 0.8888889F, -0.44444445F, 0.0F, 0.8888889F, -0.22222222F, 0.0F, 0.8888889F, 0.0F, 0.0F, 0.8888889F, 0.22222222F, 0.0F, 0.8888889F, 0.44444445F, 0.0F, 0.8888889F, 0.6666667F, 0.0F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, -0.8888889F, 0.22222222F, 0.8888889F, -0.6666667F, 0.22222222F, 0.8888889F, -0.44444445F, 0.22222222F, 0.8888889F, -0.22222222F, 0.22222222F, 0.8888889F, 0.0F, 0.22222222F, 0.8888889F, 0.22222222F, 0.22222222F, 0.8888889F, 0.44444445F, 0.22222222F, 0.8888889F, 0.6666667F, 0.22222222F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, -0.8888889F, 0.44444445F, 0.8888889F, -0.6666667F, 0.44444445F, 0.8888889F, -0.44444445F, 0.44444445F, 0.8888889F, -0.22222222F, 0.44444445F, 0.8888889F, 0.0F, 0.44444445F, 0.8888889F, 0.22222222F, 0.44444445F, 0.8888889F, 0.44444445F, 0.44444445F, 0.8888889F, 0.6666667F, 0.44444445F, 0.8888889F, 0.8888889F, 0.44444445F, 0.8888889F, -0.8888889F, 0.6666667F, 0.8888889F, -0.6666667F, 0.6666667F, 0.8888889F, -0.44444445F, 0.6666667F, 0.8888889F, -0.22222222F, 0.6666667F, 0.8888889F, 0.0F, 0.6666667F, 0.8888889F, 0.22222222F, 0.6666667F, 0.8888889F, 0.44444445F, 0.6666667F, 0.8888889F, 0.6666667F, 0.6666667F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, -0.8888889F, 0.8888889F, 0.8888889F, -0.6666667F, 0.8888889F, 0.8888889F, -0.44444445F, 0.8888889F, 0.8888889F, -0.22222222F, 0.8888889F, 0.8888889F, 0.0F, 0.8888889F, 0.8888889F, 0.22222222F, 0.8888889F, 0.8888889F, 0.44444445F, 0.8888889F, 0.8888889F, 0.6666667F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F, 0.8888889F };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 343 */     public static final int[] table_ab1_codelength = new int[] { 0, 5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
/*     */ 
/*     */ 
/*     */     
/* 347 */     public static final float[][] table_ab1_groupingtables = new float[][] { null, grouping_5bits, null, null, null, null, null, null, null, null, null, null, null, null, null, null };
/*     */ 
/*     */ 
/*     */     
/* 351 */     public static final float[] table_ab1_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.1035156E-5F, 3.0517578E-5F };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 356 */     public static final float[] table_ab1_c = new float[] { 0.0F, 1.3333334F, 1.1428572F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 1.0000305F, 1.0000153F };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 362 */     public static final float[] table_ab1_d = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.103516E-5F, 3.051758E-5F };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 369 */     public static final float[][] table_ab234_groupingtables = new float[][] { null, grouping_5bits, grouping_7bits, null, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null };
/*     */ 
/*     */ 
/*     */     
/* 373 */     public static final int[] table_ab2_codelength = new int[] { 0, 5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16 };
/* 374 */     public static final float[] table_ab2_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 3.0517578E-5F };
/*     */ 
/*     */     
/* 377 */     public static final float[] table_ab2_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.0000153F };
/*     */ 
/*     */     
/* 380 */     public static final float[] table_ab2_d = new float[] { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 3.051758E-5F };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 385 */     public static final int[] table_ab3_codelength = new int[] { 0, 5, 7, 3, 10, 4, 5, 16 };
/* 386 */     public static final float[] table_ab3_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.25F, 0.125F, 0.125F, 0.0625F, 3.0517578E-5F };
/*     */     
/* 388 */     public static final float[] table_ab3_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.1428572F, 1.7777778F, 1.0666667F, 1.032258F, 1.0000153F };
/*     */     
/* 390 */     public static final float[] table_ab3_d = new float[] { 0.0F, 0.5F, 0.5F, 0.25F, 0.5F, 0.125F, 0.0625F, 3.051758E-5F };
/*     */ 
/*     */ 
/*     */     
/* 394 */     public static final int[] table_ab4_codelength = new int[] { 0, 5, 7, 16 };
/* 395 */     public static final float[] table_ab4_factor = new float[] { 0.0F, 0.5F, 0.25F, 3.0517578E-5F };
/* 396 */     public static final float[] table_ab4_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.0000153F };
/* 397 */     public static final float[] table_ab4_d = new float[] { 0.0F, 0.5F, 0.5F, 3.051758E-5F };
/*     */ 
/*     */     
/* 400 */     public static final int[] table_cd_codelength = new int[] { 0, 5, 7, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
/* 401 */     public static final float[][] table_cd_groupingtables = new float[][] { null, grouping_5bits, grouping_7bits, grouping_10bits, null, null, null, null, null, null, null, null, null, null, null, null };
/*     */     
/* 403 */     public static final float[] table_cd_factor = new float[] { 0.0F, 0.5F, 0.25F, 0.125F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.1035156E-5F };
/*     */ 
/*     */     
/* 406 */     public static final float[] table_cd_c = new float[] { 0.0F, 1.3333334F, 1.6F, 1.7777778F, 1.0666667F, 1.032258F, 1.0158731F, 1.007874F, 1.0039216F, 1.0019569F, 1.0009775F, 1.0004885F, 1.0002443F, 1.0001221F, 1.000061F, 1.0000305F };
/*     */ 
/*     */     
/* 409 */     public static final float[] table_cd_d = new float[] { 0.0F, 0.5F, 0.5F, 0.5F, 0.125F, 0.0625F, 0.03125F, 0.015625F, 0.0078125F, 0.00390625F, 0.001953125F, 9.765625E-4F, 4.8828125E-4F, 2.4414062E-4F, 1.2207031E-4F, 6.103516E-5F };
/*     */     
/*     */     protected int subbandnumber;
/*     */     protected int allocation;
/*     */     protected int scfsi;
/*     */     protected float scalefactor1;
/*     */     protected float scalefactor2;
/*     */     protected float scalefactor3;
/* 417 */     protected int[] codelength = new int[] { 0 };
/* 418 */     protected float[][] groupingtable = new float[2][];
/*     */     
/* 420 */     protected float[] factor = new float[] { 0.0F };
/*     */     protected int groupnumber;
/*     */     protected int samplenumber;
/* 423 */     protected float[] samples = new float[3];
/* 424 */     protected float[] c = new float[] { 0.0F };
/* 425 */     protected float[] d = new float[] { 0.0F };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public SubbandLayer2(int subbandnumber) {
/* 431 */       this.subbandnumber = subbandnumber;
/* 432 */       this.groupnumber = this.samplenumber = 0;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected int get_allocationlength(Header header) {
/* 439 */       if (header.version() == 1) {
/* 440 */         int channel_bitrate = header.bitrate_index();
/*     */ 
/*     */         
/* 443 */         if (header.mode() != 3) if (channel_bitrate == 4) {
/* 444 */             channel_bitrate = 1;
/*     */           } else {
/* 446 */             channel_bitrate -= 4;
/*     */           }  
/* 448 */         if (channel_bitrate == 1 || channel_bitrate == 2) {
/*     */           
/* 450 */           if (this.subbandnumber <= 1) {
/* 451 */             return 4;
/*     */           }
/* 453 */           return 3;
/*     */         } 
/*     */         
/* 456 */         if (this.subbandnumber <= 10)
/* 457 */           return 4; 
/* 458 */         if (this.subbandnumber <= 22) {
/* 459 */           return 3;
/*     */         }
/* 461 */         return 2;
/*     */       } 
/* 463 */       if (this.subbandnumber <= 3)
/* 464 */         return 4; 
/* 465 */       if (this.subbandnumber <= 10) {
/* 466 */         return 3;
/*     */       }
/* 468 */       return 2;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     protected void prepare_sample_reading(Header header, int allocation, int channel, float[] factor, int[] codelength, float[] c, float[] d) {
/* 477 */       int channel_bitrate = header.bitrate_index();
/*     */       
/* 479 */       if (header.mode() != 3) if (channel_bitrate == 4) {
/* 480 */           channel_bitrate = 1;
/*     */         } else {
/* 482 */           channel_bitrate -= 4;
/*     */         }  
/* 484 */       if (channel_bitrate == 1 || channel_bitrate == 2) {
/*     */         
/* 486 */         this.groupingtable[channel] = table_cd_groupingtables[allocation];
/* 487 */         factor[0] = table_cd_factor[allocation];
/* 488 */         codelength[0] = table_cd_codelength[allocation];
/* 489 */         c[0] = table_cd_c[allocation];
/* 490 */         d[0] = table_cd_d[allocation];
/*     */       }
/* 492 */       else if (this.subbandnumber <= 2) {
/* 493 */         this.groupingtable[channel] = table_ab1_groupingtables[allocation];
/* 494 */         factor[0] = table_ab1_factor[allocation];
/* 495 */         codelength[0] = table_ab1_codelength[allocation];
/* 496 */         c[0] = table_ab1_c[allocation];
/* 497 */         d[0] = table_ab1_d[allocation];
/*     */       } else {
/* 499 */         this.groupingtable[channel] = table_ab234_groupingtables[allocation];
/* 500 */         if (this.subbandnumber <= 10) {
/* 501 */           factor[0] = table_ab2_factor[allocation];
/* 502 */           codelength[0] = table_ab2_codelength[allocation];
/* 503 */           c[0] = table_ab2_c[allocation];
/* 504 */           d[0] = table_ab2_d[allocation];
/* 505 */         } else if (this.subbandnumber <= 22) {
/* 506 */           factor[0] = table_ab3_factor[allocation];
/* 507 */           codelength[0] = table_ab3_codelength[allocation];
/* 508 */           c[0] = table_ab3_c[allocation];
/* 509 */           d[0] = table_ab3_d[allocation];
/*     */         } else {
/* 511 */           factor[0] = table_ab4_factor[allocation];
/* 512 */           codelength[0] = table_ab4_codelength[allocation];
/* 513 */           c[0] = table_ab4_c[allocation];
/* 514 */           d[0] = table_ab4_d[allocation];
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/* 523 */       int length = get_allocationlength(header);
/* 524 */       this.allocation = stream.get_bits(length);
/* 525 */       if (crc != null) crc.add_bits(this.allocation, length);
/*     */     
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/* 532 */       if (this.allocation != 0) {
/* 533 */         this.scfsi = stream.get_bits(2);
/* 534 */         if (crc != null) crc.add_bits(this.scfsi, 2);
/*     */       
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor(Bitstream stream, Header header) {
/* 542 */       if (this.allocation != 0) {
/* 543 */         switch (this.scfsi) {
/*     */           case 0:
/* 545 */             this.scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 546 */             this.scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 547 */             this.scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           case 1:
/* 550 */             this.scalefactor1 = this.scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 551 */             this.scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           case 2:
/* 554 */             this.scalefactor1 = this.scalefactor2 = this.scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           case 3:
/* 557 */             this.scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 558 */             this.scalefactor2 = this.scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */         } 
/* 561 */         prepare_sample_reading(header, this.allocation, 0, this.factor, this.codelength, this.c, this.d);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean read_sampledata(Bitstream stream) {
/* 569 */       if (this.allocation != 0) if (this.groupingtable[0] != null) {
/* 570 */           int samplecode = stream.get_bits(this.codelength[0]);
/*     */           
/* 572 */           samplecode += samplecode << 1;
/* 573 */           float[] target = this.samples;
/* 574 */           float[] source = this.groupingtable[0];
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 580 */           int tmp = 0;
/* 581 */           int temp = samplecode;
/*     */           
/* 583 */           if (temp > source.length - 3) temp = source.length - 3;
/*     */           
/* 585 */           target[tmp] = source[temp];
/* 586 */           temp++;
/* 587 */           tmp++;
/* 588 */           target[tmp] = source[temp];
/* 589 */           temp++;
/* 590 */           tmp++;
/* 591 */           target[tmp] = source[temp];
/*     */         }
/*     */         else {
/*     */           
/* 595 */           this.samples[0] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/* 596 */           this.samples[1] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/* 597 */           this.samples[2] = (float)((stream.get_bits(this.codelength[0]) * this.factor[0]) - 1.0D);
/*     */         } 
/*     */       
/* 600 */       this.samplenumber = 0;
/* 601 */       if (++this.groupnumber == 12) {
/* 602 */         return true;
/*     */       }
/* 604 */       return false;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/* 611 */       if (this.allocation != 0 && channels != 2) {
/* 612 */         float sample = this.samples[this.samplenumber];
/*     */         
/* 614 */         if (this.groupingtable[0] == null) sample = (sample + this.d[0]) * this.c[0]; 
/* 615 */         if (this.groupnumber <= 4) {
/* 616 */           sample *= this.scalefactor1;
/* 617 */         } else if (this.groupnumber <= 8) {
/* 618 */           sample *= this.scalefactor2;
/*     */         } else {
/* 620 */           sample *= this.scalefactor3;
/* 621 */         }  filter1.input_sample(sample, this.subbandnumber);
/*     */       } 
/*     */       
/* 624 */       if (++this.samplenumber == 3) {
/* 625 */         return true;
/*     */       }
/* 627 */       return false;
/*     */     }
/*     */   }
/*     */ 
/*     */   
/*     */   static class SubbandLayer2IntensityStereo
/*     */     extends SubbandLayer2
/*     */   {
/*     */     protected int channel2_scfsi;
/*     */     
/*     */     protected float channel2_scalefactor1;
/*     */     protected float channel2_scalefactor2;
/*     */     protected float channel2_scalefactor3;
/*     */     
/*     */     public SubbandLayer2IntensityStereo(int subbandnumber) {
/* 642 */       super(subbandnumber);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/* 649 */       super.read_allocation(stream, header, crc);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/* 656 */       if (this.allocation != 0) {
/* 657 */         this.scfsi = stream.get_bits(2);
/* 658 */         this.channel2_scfsi = stream.get_bits(2);
/* 659 */         if (crc != null) {
/* 660 */           crc.add_bits(this.scfsi, 2);
/* 661 */           crc.add_bits(this.channel2_scfsi, 2);
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor(Bitstream stream, Header header) {
/* 670 */       if (this.allocation != 0) {
/* 671 */         super.read_scalefactor(stream, header);
/* 672 */         switch (this.channel2_scfsi) {
/*     */           case 0:
/* 674 */             this.channel2_scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 675 */             this.channel2_scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 676 */             this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 1:
/* 680 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 681 */             this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 2:
/* 685 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 3:
/* 689 */             this.channel2_scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 690 */             this.channel2_scalefactor2 = this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */         } 
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean read_sampledata(Bitstream stream) {
/* 701 */       return super.read_sampledata(stream);
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/* 708 */       if (this.allocation != 0) {
/* 709 */         float sample = this.samples[this.samplenumber];
/*     */         
/* 711 */         if (this.groupingtable[0] == null) sample = (sample + this.d[0]) * this.c[0]; 
/* 712 */         if (channels == 0) {
/* 713 */           float sample2 = sample;
/* 714 */           if (this.groupnumber <= 4) {
/* 715 */             sample *= this.scalefactor1;
/* 716 */             sample2 *= this.channel2_scalefactor1;
/* 717 */           } else if (this.groupnumber <= 8) {
/* 718 */             sample *= this.scalefactor2;
/* 719 */             sample2 *= this.channel2_scalefactor2;
/*     */           } else {
/* 721 */             sample *= this.scalefactor3;
/* 722 */             sample2 *= this.channel2_scalefactor3;
/*     */           } 
/* 724 */           filter1.input_sample(sample, this.subbandnumber);
/* 725 */           filter2.input_sample(sample2, this.subbandnumber);
/* 726 */         } else if (channels == 1) {
/* 727 */           if (this.groupnumber <= 4) {
/* 728 */             sample *= this.scalefactor1;
/* 729 */           } else if (this.groupnumber <= 8) {
/* 730 */             sample *= this.scalefactor2;
/*     */           } else {
/* 732 */             sample *= this.scalefactor3;
/* 733 */           }  filter1.input_sample(sample, this.subbandnumber);
/*     */         } else {
/* 735 */           if (this.groupnumber <= 4) {
/* 736 */             sample *= this.channel2_scalefactor1;
/* 737 */           } else if (this.groupnumber <= 8) {
/* 738 */             sample *= this.channel2_scalefactor2;
/*     */           } else {
/* 740 */             sample *= this.channel2_scalefactor3;
/* 741 */           }  filter1.input_sample(sample, this.subbandnumber);
/*     */         } 
/*     */       } 
/*     */       
/* 745 */       if (++this.samplenumber == 3) {
/* 746 */         return true;
/*     */       }
/* 748 */       return false;
/*     */     }
/*     */   }
/*     */   
/*     */   static class SubbandLayer2Stereo
/*     */     extends SubbandLayer2
/*     */   {
/*     */     protected int channel2_allocation;
/*     */     protected int channel2_scfsi;
/*     */     protected float channel2_scalefactor1;
/*     */     protected float channel2_scalefactor2;
/*     */     protected float channel2_scalefactor3;
/* 760 */     protected int[] channel2_codelength = new int[] { 0 };
/*     */     
/* 762 */     protected float[] channel2_factor = new float[] { 0.0F };
/*     */     protected float[] channel2_samples;
/* 764 */     protected float[] channel2_c = new float[] { 0.0F };
/* 765 */     protected float[] channel2_d = new float[] { 0.0F };
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public SubbandLayer2Stereo(int subbandnumber) {
/* 771 */       super(subbandnumber);
/* 772 */       this.channel2_samples = new float[3];
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_allocation(Bitstream stream, Header header, Crc16 crc) {
/* 779 */       int length = get_allocationlength(header);
/* 780 */       this.allocation = stream.get_bits(length);
/* 781 */       this.channel2_allocation = stream.get_bits(length);
/* 782 */       if (crc != null) {
/* 783 */         crc.add_bits(this.allocation, length);
/* 784 */         crc.add_bits(this.channel2_allocation, length);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor_selection(Bitstream stream, Crc16 crc) {
/* 792 */       if (this.allocation != 0) {
/* 793 */         this.scfsi = stream.get_bits(2);
/* 794 */         if (crc != null) crc.add_bits(this.scfsi, 2); 
/*     */       } 
/* 796 */       if (this.channel2_allocation != 0) {
/* 797 */         this.channel2_scfsi = stream.get_bits(2);
/* 798 */         if (crc != null) crc.add_bits(this.channel2_scfsi, 2);
/*     */       
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */     
/*     */     public void read_scalefactor(Bitstream stream, Header header) {
/* 806 */       super.read_scalefactor(stream, header);
/* 807 */       if (this.channel2_allocation != 0) {
/* 808 */         switch (this.channel2_scfsi) {
/*     */           case 0:
/* 810 */             this.channel2_scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 811 */             this.channel2_scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 812 */             this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 1:
/* 816 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 817 */             this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 2:
/* 821 */             this.channel2_scalefactor1 = this.channel2_scalefactor2 = this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */           
/*     */           case 3:
/* 825 */             this.channel2_scalefactor1 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/* 826 */             this.channel2_scalefactor2 = this.channel2_scalefactor3 = LayerIDecoder.scalefactors[stream.get_bits(6)];
/*     */             break;
/*     */         } 
/* 829 */         prepare_sample_reading(header, this.channel2_allocation, 1, this.channel2_factor, this.channel2_codelength, this.channel2_c, this.channel2_d);
/*     */       } 
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean read_sampledata(Bitstream stream) {
/* 837 */       boolean returnvalue = super.read_sampledata(stream);
/*     */       
/* 839 */       if (this.channel2_allocation != 0) if (this.groupingtable[1] != null) {
/* 840 */           int samplecode = stream.get_bits(this.channel2_codelength[0]);
/*     */           
/* 842 */           samplecode += samplecode << 1;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */           
/* 848 */           float[] target = this.channel2_samples;
/* 849 */           float[] source = this.groupingtable[1];
/* 850 */           int tmp = 0;
/* 851 */           int temp = samplecode;
/* 852 */           target[tmp] = source[temp];
/* 853 */           temp++;
/* 854 */           tmp++;
/* 855 */           target[tmp] = source[temp];
/* 856 */           temp++;
/* 857 */           tmp++;
/* 858 */           target[tmp] = source[temp];
/*     */         } else {
/*     */           
/* 861 */           this.channel2_samples[0] = (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/* 862 */           this.channel2_samples[1] = (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/* 863 */           this.channel2_samples[2] = (float)((stream.get_bits(this.channel2_codelength[0]) * this.channel2_factor[0]) - 1.0D);
/*     */         }  
/* 865 */       return returnvalue;
/*     */     }
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*     */     public boolean put_next_sample(int channels, SynthesisFilter filter1, SynthesisFilter filter2) {
/* 872 */       boolean returnvalue = super.put_next_sample(channels, filter1, filter2);
/* 873 */       if (this.channel2_allocation != 0 && channels != 1) {
/* 874 */         float sample = this.channel2_samples[this.samplenumber - 1];
/*     */         
/* 876 */         if (this.groupingtable[1] == null) sample = (sample + this.channel2_d[0]) * this.channel2_c[0];
/*     */         
/* 878 */         if (this.groupnumber <= 4) {
/* 879 */           sample *= this.channel2_scalefactor1;
/* 880 */         } else if (this.groupnumber <= 8) {
/* 881 */           sample *= this.channel2_scalefactor2;
/*     */         } else {
/* 883 */           sample *= this.channel2_scalefactor3;
/* 884 */         }  if (channels == 0) {
/* 885 */           filter2.input_sample(sample, this.subbandnumber);
/*     */         } else {
/* 887 */           filter1.input_sample(sample, this.subbandnumber);
/*     */         } 
/* 889 */       }  return returnvalue;
/*     */     }
/*     */   }
/*     */ }


/* Location:              D:\steam\steamapps\common\SlayTheSpire\desktop-1.0.jar!\javazoom\jl\decoder\LayerIIDecoder.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */